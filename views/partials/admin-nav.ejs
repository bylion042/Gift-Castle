<!-- ADMIN NAV -->
<div class="small-screen-nav">
  <div class="link-container">

    <a href="/dashboard" class="nav-link">
      <i class="ri-home-4-line"></i>
      <p>My Web</p>
    </a>

    <a href="#" class="nav-link">
      <i class="ri-coin-line"></i>
      <p>Crypto</p>
    </a>

    <a href="/admin" class="nav-link">
      <i class="ri-user-line"></i>
      <p>Admin</p>
      <% if (giftCardCount> 0) { %>
        <span class="active-message">
          <%= giftCardCount %>
        </span>
        <% } %>
    </a>

    <a href="/update-rate" class="nav-link">
      <i class="ri-stock-line"></i>
      <p>Set Rate</p>
    </a>

    <a href="#" class="nav-link" onclick="location.reload();">
      <i class="ri-loop-left-line"></i>
      <p>Refresh</p>
    </a>
  </div>
</div>

<!-- Function to handle active state -->
<script>
  const navLinks = document.querySelectorAll('.nav-link');
  const currentPath = window.location.pathname;

  navLinks.forEach(link => {
    const linkPath = link.getAttribute('href');
    if (currentPath.startsWith(linkPath)) {
      link.classList.add('active');
    } else {
      link.classList.remove('active');
    }
  });
</script>




<!-- // DRAGABLE IMAGE  -->
<div class="draggable-image installBtn">
  <a href="#"><img src="/images/install.png" alt="Draggable" class="zoom-image" /></a>
</div>


<!-- // DRAGABLE IMAGE  -->
<script>
document.addEventListener('DOMContentLoaded', () => {
    const draggable = document.querySelector('.draggable-image');
    const closeButton = document.querySelector('.close-btn');
    let isDragging = false;
    let offsetX = 0;
    let offsetY = 0;

    // Common function to start dragging
    const startDrag = (e) => {
        isDragging = true;
        draggable.style.cursor = 'grabbing';

        const rect = draggable.getBoundingClientRect();

        // Calculate offsets for mouse or touch
        if (e.type === 'mousedown') {
            offsetX = e.clientX - rect.left;
            offsetY = e.clientY - rect.top;
        } else if (e.type === 'touchstart') {
            offsetX = e.touches[0].clientX - rect.left;
            offsetY = e.touches[0].clientY - rect.top;
        }
    };

    // Common function to drag
    const onDrag = (e) => {
        if (!isDragging) return;

        // Get cursor or touch position
        let clientX, clientY;
        if (e.type === 'mousemove') {
            clientX = e.clientX;
            clientY = e.clientY;
        } else if (e.type === 'touchmove') {
            clientX = e.touches[0].clientX;
            clientY = e.touches[0].clientY;
        }

        // Update position of the draggable element
        draggable.style.left = `${clientX - offsetX}px`;
        draggable.style.top = `${clientY - offsetY}px`;
        draggable.style.right = 'auto'; // Prevent snapping back to right
        draggable.style.transform = 'none'; // Remove initial centering
    };

    // Common function to stop dragging
    const stopDrag = () => {
        isDragging = false;
        draggable.style.cursor = 'grab';
    };

    // Mouse events
    draggable.addEventListener('mousedown', (e) => {
        if (e.target.classList.contains('close-btn')) return; // Ignore drag on close button
        startDrag(e);
    });

    window.addEventListener('mousemove', onDrag);
    window.addEventListener('mouseup', stopDrag);

    // Touch events
    draggable.addEventListener('touchstart', (e) => {
        if (e.target.classList.contains('close-btn')) return; // Ignore drag on close button
        startDrag(e);
    });

    window.addEventListener('touchmove', onDrag);
    window.addEventListener('touchend', stopDrag);

    // Close functionality
    closeButton.addEventListener('click', () => {
        draggable.style.display = 'none'; // Hide the draggable container
    });
});

</script>